import React from "react";
import { Post } from "@/types";
import { postsAPI } from "@/utils/api";
import { useAuth } from "@/contexts/AuthContext";
import { useLikedPosts } from "@/hooks/useLikedPosts";
import { useRouter } from "next/navigation";
import styles from "./styles.module.scss";

interface PostCardProps {
  post: Post;
  onClick?: () => void;
  onLikeUpdate?: (updatedPost: Post) => void;
  onDelete?: (postId: number) => void;
}

export default function PostCard({
  post,
  onClick,
  onLikeUpdate,
  onDelete,
}: PostCardProps) {
  const { user } = useAuth();
  const { isLiked, setLiked } = useLikedPosts();
  const router = useRouter();

  // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä Í≤åÏãúÎ¨º ÏûëÏÑ±ÏûêÏù∏ÏßÄ ÌôïÏù∏
  const isOwnPost = Boolean(user && post.author && user.id === post.author.id);

  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = Math.floor(
      (now.getTime() - date.getTime()) / (1000 * 60 * 60)
    );

    if (diffInHours < 1) return "Î∞©Í∏à Ï†Ñ";
    if (diffInHours < 24) return `${diffInHours}ÏãúÍ∞Ñ Ï†Ñ`;

    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) return `${diffInDays}Ïùº Ï†Ñ`;

    return date.toLocaleDateString("ko-KR");
  };

  const formatDuration = (duration: number): string => {
    if (duration >= 1000) {
      // Ï¥à Îã®ÏúÑÎ°ú Ï†ÄÏû•Îêú Í≤ΩÏö∞
      const hours = Math.floor(duration / 3600);
      const minutes = Math.floor((duration % 3600) / 60);
      const seconds = duration % 60;

      if (hours > 0) {
        return `${hours}ÏãúÍ∞Ñ ${minutes}Î∂Ñ ${seconds}Ï¥à`;
      } else if (minutes > 0) {
        return `${minutes}Î∂Ñ ${seconds}Ï¥à`;
      } else {
        return `${seconds}Ï¥à`;
      }
    } else {
      // Î∂Ñ Îã®ÏúÑÎ°ú Ï†ÄÏû•Îêú Í≤ΩÏö∞
      const hours = Math.floor(duration / 60);
      const minutes = duration % 60;

      if (hours > 0) {
        return `${hours}ÏãúÍ∞Ñ ${minutes}Î∂Ñ`;
      } else {
        return `${minutes}Î∂Ñ`;
      }
    }
  };

  const getStrokeName = (stroke: string) => {
    const strokeNames: { [key: string]: string } = {
      freestyle: "ÏûêÏú†Ìòï",
      backstroke: "Î∞∞ÏòÅ",
      breaststroke: "ÌèâÏòÅ",
      butterfly: "Ï†ëÏòÅ",
      medley: "Í∞úÏù∏ÌòºÏòÅ",
    };
    return strokeNames[stroke] || stroke;
  };

  const handleLikeClick = async (e: React.MouseEvent) => {
    e.stopPropagation(); // Í≤åÏãúÎ¨º ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Î∞©ÏßÄ

    if (!user) {
      alert("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
      return;
    }

    try {
      // Ï¢ãÏïÑÏöî Í∏∞Îä•ÏùÄ Î∞±ÏóîÎìúÏóêÏÑú ÏïÑÏßÅ Íµ¨ÌòÑÎêòÏßÄ ÏïäÏïòÏúºÎØÄÎ°ú ÏûÑÏãúÎ°ú Î°úÏª¨ ÏÉÅÌÉúÎßå ÏóÖÎç∞Ïù¥Ìä∏
      const updatedPost = { ...post, isLiked: !isLiked(post.id) };
      setLiked(post.id, updatedPost.isLiked);

      if (onLikeUpdate) {
        onLikeUpdate(updatedPost);
      }
    } catch (error) {
      console.error("Ï¢ãÏïÑÏöî Ï≤òÎ¶¨ Ïã§Ìå®:", error);
      alert("Ï¢ãÏïÑÏöî Ï≤òÎ¶¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }
  };

  const handleRecordClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (post.swimmingRecord) {
      router.push(`/records/${post.swimmingRecord.id}`);
    }
  };

  const handleDelete = async (e: React.MouseEvent) => {
    e.stopPropagation();

    if (!isOwnPost) return;

    if (!confirm("Ï†ïÎßêÎ°ú Ïù¥ Í≤åÏãúÎ¨ºÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?")) {
      return;
    }

    try {
      await postsAPI.deletePost(post.id);
      if (onDelete) {
        onDelete(post.id);
      }
    } catch (error) {
      console.error("Í≤åÏãúÎ¨º ÏÇ≠Ï†ú Ïã§Ìå®:", error);
      alert("Í≤åÏãúÎ¨º ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    router.push(`/posts/${post.id}/edit`);
  };

  const handlePostClick = () => {
    if (onClick) {
      onClick();
    } else {
      router.push(`/posts/${post.id}`);
    }
  };

  return (
    <div className={styles.postCard} onClick={handlePostClick}>
      <div className={styles.postHeader}>
        <div className={styles.authorInfo}>
          <div className={styles.avatar}>
            {post.author?.profileImage ? (
              <img
                src={post.author.profileImage}
                alt={post.author.name}
                className={styles.avatarImage}
              />
            ) : (
              <div className={styles.avatarPlaceholder}>
                {post.author?.name?.charAt(0) || "?"}
              </div>
            )}
          </div>
          <div className={styles.authorDetails}>
            <span className={styles.authorName}>
              {post.author?.name || "ÏùµÎ™Ö"}
            </span>
            <span className={styles.postTime}>
              {formatTime(post.createdAt)}
            </span>
          </div>
        </div>

        {isOwnPost && (
          <div className={styles.postActions}>
            <button
              onClick={handleEdit}
              className={styles.editButton}
              title="ÏàòÏ†ï"
            >
              ‚úèÔ∏è
            </button>
            <button
              onClick={handleDelete}
              className={styles.deleteButton}
              title="ÏÇ≠Ï†ú"
            >
              üóëÔ∏è
            </button>
          </div>
        )}
      </div>

      <div className={styles.postContent}>
        <h3 className={styles.postTitle}>{post.title}</h3>
        <p className={styles.postText}>{post.content}</p>

        {post.category && (
          <span className={styles.postCategory}>{post.category}</span>
        )}
      </div>

      {post.swimmingRecord && (
        <div className={styles.recordPreview} onClick={handleRecordClick}>
          <div className={styles.recordHeader}>
            <span className={styles.recordLabel}>üìä ÏàòÏòÅ Í∏∞Î°ù</span>
            <span className={styles.recordTime}>
              {formatDuration(post.swimmingRecord.totalDuration || 0)}
            </span>
          </div>
          <div className={styles.recordDetails}>
            <span className={styles.recordStroke}>
              {post.swimmingRecord.strokes &&
              post.swimmingRecord.strokes.length > 0
                ? post.swimmingRecord.strokes
                    .map((stroke) => getStrokeName(stroke.style))
                    .join(", ")
                : getStrokeName(post.swimmingRecord.strokes[0]?.style)}
            </span>
            <span className={styles.recordDistance}>
              {post.swimmingRecord.totalDistance
                ? `${post.swimmingRecord.totalDistance}m`
                : "Í±∞Î¶¨ Ï†ïÎ≥¥ ÏóÜÏùå"}
              m
            </span>
          </div>
        </div>
      )}

      <div className={styles.postFooter}>
        <div className={styles.engagement}>
          <button
            onClick={handleLikeClick}
            className={`${styles.likeButton} ${
              isLiked(post.id) ? styles.liked : ""
            }`}
          >
            ‚ù§Ô∏è {post.likes || 0}
          </button>
          <span className={styles.commentsCount}>üí¨ {post.comments || 0}</span>
        </div>
      </div>
    </div>
  );
}
